sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 128
Number of Virtual Registers: 32
Number of Physical Registers: 128
Datapath Width: 64
Total Power Consumption: 95.1592
Branch Predictor Power Consumption: 4.52313  (4.86%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.616985  (0.662%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0447235
 RAT bitline_power (W): 0.431848
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 8.19411  (8.8%)
 tagdrive (W): 0.277708
 tagmatch (W): 0.106989
 Selection Logic (W): 0.0295277
 decode_power (W): 0.543666
 wordline_power (W): 0.0844643
 bitline_power (W): 7.15176
Load/Store Queue Power Consumption: 3.73642  (4.01%)
 tagdrive (W): 1.55613
 tagmatch (W): 0.604642
 decode_power (W): 0.0616683
 wordline_power (W): 0.0150119
 bitline_power (W): 1.49897
Arch. Register File Power Consumption: 3.57247  (3.83%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 5.42703  (5.83%)
Total Clock Power: 29.4661  (31.6%)
Int ALU Power: 4.66013  (5%)
FP ALU Power: 14.281  (15.3%)
Instruction Cache Power Consumption: 3.97049  (4.26%)
 decode_power (W): 1.67268
 wordline_power (W): 0.028656
 bitline_power (W): 1.5122
 senseamp_power (W): 0.096
 tagarray_power (W): 0.660946
Itlb_power (W): 0.263317 (0.283%)
Data Cache Power Consumption: 8.34726  (8.96%)
 decode_power (W): 1.44978
 wordline_power (W): 0.196735
 bitline_power (W): 4.58765
 senseamp_power (W): 0.768
 tagarray_power (W): 1.34509
Dtlb_power (W): 0.900515 (0.967%)
Level 2 Cache Power Consumption: 5.20014 (5.58%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 1.52247
sim-main: initalizing context 0:test.arg
args: 0:hello 
sim: loading binary...
sim: loading hello
warning: section `.comment' ignored...
sim: command line: ./sim-outorder -duplicate:addr_file addresses_5percent.txt -max:inst 10000000000 test.arg 

sim: simulation started @ Thu Jul  3 20:32:13 2025, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst          1410065408 # maximum number of inst's to execute
-fastfwd              1000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-cpred                  bimod # cache load-latency predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-cpred:bimod     2048 # cache load-latency bimodal predictor config (<table size>)
-cpred:2lev      1 1024 8 0 # cache load-latency 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-cpred:comb      1024 # cache load-latency combining predictor config (<meta_table_size>)
-cpred:ras                  0 # return address stack size (0 for no return stack)
-cpred:btb       512 4 # cache load-latency BTB config (<num_sets> <associativity>)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-rob:size                 128 # reorder buffer (ROB) size
-fetch:policy |icount|round_robin|       icount # fetch policy          
-duplicate:addr_file addresses_5percent.txt # file containing list of instruction addresses to duplicate
-recovery:model        squash # Alpha squash recovery or perfect predition: |squash|perfect|
-iq:size                   32 # issue queue (IQ) size 
-iq:issue_exec_delay            1 # minimum cycles between issue and execution
-fetch_rename_delay            4 # number of cycles between fetch and rename stages
-rename_dispatch_delay            1 # number cycles between rename and dispatch stages
-rf:size                  128 # register file (RF) size for each the INT and FP physical register file)
-lsq:size                  48 # load/store queue (LSQ) size
-cache:dl1       dl1:256:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:8:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:2:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         100 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-power:print_stats         true # print power statistics collected by wattch?

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



Loaded 2 addresses for selective duplication from 'addresses_5percent.txt'
sim: ** fast forwarding insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn                2200196 # total number of instructions committed
sim_num_insn 0              2200195 # total number of instructions committed for this thread
sim_num_refs                 825077 # total number of loads and stores committed
sim_num_loads                550051 # total number of loads committed
sim_num_stores          275026.0000 # total number of stores committed
sim_num_branches             137513 # total number of branches committed
sim_elapsed_time                 12 # total simulation time in seconds
sim_inst_rate           183349.6667 # simulation speed (in insts/sec)
sim_total_insn              2200313 # total number of instructions executed
sim_total_refs               825127 # total number of loads and stores executed
sim_total_loads              550085 # total number of loads executed
sim_total_stores        275042.0000 # total number of stores executed
sim_total_branches           137519 # total number of branches executed
sim_cycle                    850449 # total simulation time in cycles
sim_IPC                      2.5871 # instructions per cycle
sim_CPI                      0.3865 # cycles per instruction
sim_exec_BW                  2.5872 # total instructions (mis-spec + committed) per cycle
sim_IPB                     15.9999 # instruction per branch
sim_slip                   66941674 # total number of slip cycles
avg_sim_slip                30.4253 # the average slip between issue and retirement
Thread_0_bpred_bimod.lookups       137521 # total number of bpred lookups
Thread_0_bpred_bimod.updates       137513 # total number of updates
Thread_0_bpred_bimod.addr_hits       137509 # total number of address-predicted hits
Thread_0_bpred_bimod.dir_hits       137510 # total number of direction-predicted hits (includes addr-hits)
Thread_0_bpred_bimod.misses            3 # total number of misses
Thread_0_bpred_bimod.jr_hits            0 # total number of address-predicted hits for JR's
Thread_0_bpred_bimod.jr_seen            0 # total number of JR's seen
Thread_0_bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
Thread_0_bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
Thread_0_bpred_bimod.bpred_addr_rate    1.0000 # branch address-prediction rate (i.e., addr-hits/updates)
Thread_0_bpred_bimod.bpred_dir_rate    1.0000 # branch direction-prediction rate (i.e., all-hits/updates)
Thread_0_bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
Thread_0_bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
Thread_0_bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
Thread_0_bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
Thread_0_bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
Thread_0_bpred_bimod.ras_hits.PP            0 # total number of RAS hits
Thread_0_bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
Thread_0_cpred_bimod.lookups       550058 # total number of bpred lookups
Thread_0_cpred_bimod.updates       550058 # total number of updates
Thread_0_cpred_bimod.addr_hits        37517 # total number of address-predicted hits
Thread_0_cpred_bimod.dir_hits        37517 # total number of direction-predicted hits (includes addr-hits)
Thread_0_cpred_bimod.misses       512541 # total number of misses
Thread_0_cpred_bimod.jr_hits            0 # total number of address-predicted hits for JR's
Thread_0_cpred_bimod.jr_seen            0 # total number of JR's seen
Thread_0_cpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
Thread_0_cpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
Thread_0_cpred_bimod.bpred_addr_rate    0.0682 # branch address-prediction rate (i.e., addr-hits/updates)
Thread_0_cpred_bimod.bpred_dir_rate    0.0682 # branch direction-prediction rate (i.e., all-hits/updates)
Thread_0_cpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
Thread_0_cpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
Thread_0_cpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
Thread_0_cpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
Thread_0_cpred_bimod.used_ras.PP            0 # total number of RAS predictions used
Thread_0_cpred_bimod.ras_hits.PP            0 # total number of RAS hits
Thread_0_cpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses                2200354 # total number of accesses
il1.hits                    2200347 # total number of hits
il1.misses                        7 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                 275037 # total number of accesses
dl1.hits                     275037 # total number of hits
dl1.misses                        0 # total number of misses
dl1.replacements                  0 # total number of replacements
dl1.writebacks                    0 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                      7 # total number of accesses
ul2.hits                          4 # total number of hits
ul2.misses                        3 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.4286 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses               2200354 # total number of accesses
itlb.hits                   2200354 # total number of hits
itlb.misses                       0 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                825084 # total number of accesses
dtlb.hits                    825084 # total number of hits
dtlb.misses                       0 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
mem->ld_text_size              8192 # program text (code) size in bytes
mem->ld_data_base      0x0120000000 # program initialized data segment base
mem->ld_data_size              8192 # program init'ed `.data' and uninit'ed `.bss' size in bytes
mem->ld_stack_base     0x011ff9b000 # program stack segment base (highest address in stack)
mem->ld_stack_size            16384 # program initial stack size
mem->ld_prog_entry     0x0120000130 # program entry point (initial PC)
mem->ld_environ_base   0x011ff97000 # program environment base address address
mem->ld_target_big_endian            0 # target executable endian-ness, non-zero if big endian
mem_0.page_count                  3 # total number of pages allocated
mem_0.page_mem                  24k # total size of memory pages allocated
mem_0.ptab_misses                 3 # total first level page table misses
mem_0.ptab_accesses        16012604 # total page table accesses
mem_0.ptab_miss_rate         0.0000 # first level page table miss rate
rename_power            524714.5889 # total power usage of rename unit
bpred_power            3846688.3203 # total power usage of bpred unit
window_power           6968675.1826 # total power usage of instruction window
lsq_power              3177637.0066 # total power usage of load/store queue
regfile_power          3038205.3295 # total power usage of arch. regfile
icache_power           3600632.6931 # total power usage of icache
dcache_power           7864761.3303 # total power usage of dcache
dcache2_power          4422450.3872 # total power usage of dcache2
alu_power              16108503.6791 # total power usage of alu
falu_power             12145300.3930 # total power usage of falu
resultbus_power        4615413.2138 # total power usage of resultbus
clock_power            25059450.8544 # total power usage of clock
avg_rename_power             0.6170 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             8.1941 # avg power usage of instruction window
avg_lsq_power                3.7364 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             4.2338 # avg power usage of icache
avg_dcache_power             9.2478 # avg power usage of dcache
avg_dcache2_power            5.2001 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          5.4270 # avg power usage of resultbus
avg_clock_power             29.4661 # avg power usage of clock
fetch_stage_power      7447321.0134 # total power usage of fetch stage
dispatch_stage_power    524714.5889 # total power usage of dispatch stage
issue_stage_power      43157440.7997 # total power usage of issue stage
avg_fetch_power              8.7569 # average power of fetch unit per cycle
avg_dispatch_power           0.6170 # average power of dispatch unit per cycle
avg_issue_power             50.7467 # average power of issue unit per cycle
total_power            79227132.5858 # total power per cycle
avg_total_power_cycle       93.1592 # average total power per cycle
avg_total_power_cycle_nofp_nod2      73.6780 # average total power per cycle
avg_total_power_insn        36.0072 # average total power per insn
avg_total_power_insn_nofp_nod2      28.4775 # average total power per insn
rename_power_cc1        524491.8572 # total power usage of rename unit_cc1
bpred_power_cc1         621988.6801 # total power usage of bpred unit_cc1
window_power_cc1       7114616.4634 # total power usage of instruction window_cc1
lsq_power_cc1          1061526.6444 # total power usage of lsq_cc1
regfile_power_cc1      2476230.3549 # total power usage of arch. regfile_cc1
icache_power_cc1       3599150.8624 # total power usage of icache_cc1
dcache_power_cc1       2543461.9037 # total power usage of dcache_cc1
dcache2_power_cc1           36.4010 # total power usage of dcache2_cc1
alu_power_cc1          8959914.9717 # total power usage of alu_cc1
resultbus_power_cc1    4309893.9091 # total power usage of resultbus_cc1
clock_power_cc1        14396975.6882 # total power usage of clock_cc1
avg_rename_power_cc1         0.6167 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.7314 # avg power usage of bpred unit_cc1
avg_window_power_cc1         8.3657 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            1.2482 # avg power usage of lsq_cc1
avg_regfile_power_cc1        2.9117 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         4.2321 # avg power usage of icache_cc1
avg_dcache_power_cc1         2.9907 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0000 # avg power usage of dcache2_cc1
avg_alu_power_cc1           10.5355 # avg power usage of alu_cc1
avg_resultbus_power_cc1       5.0678 # avg power usage of resultbus_cc1
avg_clock_power_cc1         16.9287 # avg power usage of clock_cc1
fetch_stage_power_cc1  4221139.5425 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  524491.8572 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  23989450.2932 # total power usage of issue stage_cc1
avg_fetch_power_cc1          4.9634 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.6167 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         28.2080 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  45608287.7359 # total power per cycle_cc1
avg_total_power_cycle_cc1      53.6285 # average total power per cycle_cc1
avg_total_power_insn_cc1      20.7281 # average total power per insn_cc1
rename_power_cc2        339390.2313 # total power usage of rename unit_cc2
bpred_power_cc2         310994.3400 # total power usage of bpred unit_cc2
window_power_cc2       7021718.9965 # total power usage of instruction window_cc2
lsq_power_cc2           733351.8047 # total power usage of lsq_cc2
regfile_power_cc2       595824.2020 # total power usage of arch. regfile_cc2
icache_power_cc2       3599150.8624 # total power usage of icache_cc2
dcache_power_cc2       1271740.1996 # total power usage of dcache_cc2
dcache2_power_cc2           18.2005 # total power usage of dcache2_cc2
alu_power_cc2          3991474.7944 # total power usage of alu_cc2
resultbus_power_cc2    3532654.7603 # total power usage of resultbus_cc2
clock_power_cc2        10324246.0295 # total power usage of clock_cc2
avg_rename_power_cc2         0.3991 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.3657 # avg power usage of bpred unit_cc2
avg_window_power_cc2         8.2565 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.8623 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.7006 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         4.2321 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.4954 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0000 # avg power usage of dcache2_cc2
avg_alu_power_cc2            4.6934 # avg power usage of alu_cc2
avg_resultbus_power_cc2       4.1539 # avg power usage of resultbus_cc2
avg_clock_power_cc2         12.1398 # avg power usage of clock_cc2
fetch_stage_power_cc2  3910145.2024 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  339390.2313 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  16550958.7560 # total power usage of issue stage_cc2
avg_fetch_power_cc2          4.5977 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.3991 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2         19.4614 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  31720564.4212 # total power per cycle_cc2
avg_total_power_cycle_cc2      37.2986 # average total power per cycle_cc2
avg_total_power_insn_cc2      14.4164 # average total power per insn_cc2
rename_power_cc3        339412.5045 # total power usage of rename unit_cc3
bpred_power_cc3         633464.3041 # total power usage of bpred unit_cc3
window_power_cc3       7022002.3739 # total power usage of instruction window_cc3
lsq_power_cc3           929443.4303 # total power usage of lsq_cc3
regfile_power_cc3       618287.9066 # total power usage of arch. regfile_cc3
icache_power_cc3       3599299.0454 # total power usage of icache_cc3
dcache_power_cc3       1803870.1423 # total power usage of dcache_cc3
dcache2_power_cc3       442259.5991 # total power usage of dcache2_cc3
alu_power_cc3          4706333.6652 # total power usage of alu_cc3
resultbus_power_cc3    3532851.2188 # total power usage of resultbus_cc3
clock_power_cc3        11346800.4377 # total power usage of clock_cc3
avg_rename_power_cc3         0.3991 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.7449 # avg power usage of bpred unit_cc3
avg_window_power_cc3         8.2568 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            1.0929 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.7270 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         4.2322 # avg power usage of icache_cc3
avg_dcache_power_cc3         2.1211 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.5200 # avg power usage of dcache2_cc3
avg_alu_power_cc3            5.5339 # avg power usage of alu_cc3
avg_resultbus_power_cc3       4.1541 # avg power usage of resultbus_cc3
avg_clock_power_cc3         13.3421 # avg power usage of clock_cc3
fetch_stage_power_cc3  4232763.3495 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  339412.5045 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  18436760.4296 # total power usage of issue stage_cc3
avg_fetch_power_cc3          4.9771 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.3991 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         21.6789 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  34974024.6279 # total power per cycle_cc3
avg_total_power_cycle_cc3      41.1242 # average total power per cycle_cc3
avg_total_power_insn_cc3      15.8950 # average total power per insn_cc3
total_rename_access         2200313 # total number accesses of rename unit
total_bpred_access           137513 # total number accesses of bpred unit
total_window_access         9050990 # total number accesses of instruction window
total_lsq_access             825086 # total number accesses of load/store queue
total_regfile_access        2262680 # total number accesses of arch. regfile
total_icache_access         2200354 # total number accesses of icache
total_dcache_access          275037 # total number accesses of dcache
total_dcache2_access              7 # total number accesses of dcache2
total_alu_access            2600248 # total number accesses of alu
total_resultbus_access      2812777 # total number accesses of resultbus
avg_rename_access            2.5872 # avg number accesses of rename unit
avg_bpred_access             0.1617 # avg number accesses of bpred unit
avg_window_access           10.6426 # avg number accesses of instruction window
avg_lsq_access               0.9702 # avg number accesses of lsq
avg_regfile_access           2.6606 # avg number accesses of arch. regfile
avg_icache_access            2.5873 # avg number accesses of icache
avg_dcache_access            0.3234 # avg number accesses of dcache
avg_dcache2_access           0.0000 # avg number accesses of dcache2
avg_alu_access               3.0575 # avg number accesses of alu
avg_resultbus_access         3.3074 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                15 # max number accesses of instruction window
max_lsq_access                    3 # max number accesses of load/store queue
max_regfile_access                4 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                1 # max number accesses of dcache2
max_alu_access                    5 # max number accesses of alu
max_resultbus_access              5 # max number accesses of resultbus
max_cycle_power_cc1         70.8297 # maximum cycle power usage of cc1
max_cycle_power_cc2         46.5769 # maximum cycle power usage of cc2
max_cycle_power_cc3         49.3726 # maximum cycle power usage of cc3


Cache Parameters:
  Size in bytes: 16384
  Number of sets: 512
  Associativity: 4
  Block Size (bytes): 8

Access Time: 9.27925e-09
Cycle Time:  1.09081e-08

Best Ndwl (L1): 8
Best Ndbl (L1): 1
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 4
Best Ntspd (L1): 1

Time Components:
 data side (with Output driver) (ns): 8.44162
 tag side (ns): 8.55667
 decode_data (ns): 5.29318
 wordline_data (ns): 1.03507
 bitline_data (ns): 0.810785
 sense_amp_data (ns): 0.58
 decode_tag (ns): 2.37065
 wordline_tag (ns): 1.36749
 bitline_tag (ns): 0.158246
 sense_amp_tag (ns): 0.26
 compare (ns): 2.42991
 mux driver (ns): 1.6125
 sel inverter (ns): 0.357877
 data output driver (ns): 0.722579
 total data path (with output driver) (ns): 7.71904
 total tag path is set assoc (ns): 8.55667
 precharge time (ns): 1.6289

Cache Parameters:
  Size in bytes: 32768
  Number of sets: 512
  Associativity: 2
  Block Size (bytes): 32

Access Time: 9.43232e-09
Cycle Time:  1.14143e-08

Best Ndwl (L1): 4
Best Ndbl (L1): 1
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 8.05618
 tag side (ns): 8.45678
 decode_data (ns): 4.25828
 wordline_data (ns): 1.38811
 bitline_data (ns): 0.854247
 sense_amp_data (ns): 0.58
 decode_tag (ns): 2.01282
 wordline_tag (ns): 1.27279
 bitline_tag (ns): 0.179065
 sense_amp_tag (ns): 0.26
 compare (ns): 2.30022
 mux driver (ns): 2.08627
 sel inverter (ns): 0.345618
 data output driver (ns): 0.975536
 total data path (with output driver) (ns): 7.08064
 total tag path is set assoc (ns): 8.45678
 precharge time (ns): 1.98194

Cache Parameters:
  Size in bytes: 32768
  Number of sets: 256
  Associativity: 4
  Block Size (bytes): 32

Access Time: 9.99176e-09
Cycle Time:  1.21362e-08

Best Ndwl (L1): 4
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 1

Time Components:
 data side (with Output driver) (ns): 7.13693
 tag side (ns): 8.6883
 decode_data (ns): 3.56242
 wordline_data (ns): 1.55063
 bitline_data (ns): 0.14043
 sense_amp_data (ns): 0.58
 decode_tag (ns): 2.01282
 wordline_tag (ns): 1.31698
 bitline_tag (ns): 0.16235
 sense_amp_tag (ns): 0.26
 compare (ns): 2.23669
 mux driver (ns): 2.36001
 sel inverter (ns): 0.339451
 data output driver (ns): 1.30346
 total data path (with output driver) (ns): 5.83348
 total tag path is set assoc (ns): 8.6883
 precharge time (ns): 2.14446

Cache Parameters:
  Size in bytes: 524288
  Number of sets: 1024
  Associativity: 8
  Block Size (bytes): 64

Access Time: 2.00419e-08
Cycle Time:  2.32766e-08

Best Ndwl (L1): 4
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 1

Time Components:
 data side (with Output driver) (ns): 16.2461
 tag side (ns): 15.2007
 decode_data (ns): 7.31708
 wordline_data (ns): 2.64084
 bitline_data (ns): 0.866882
 sense_amp_data (ns): 0.58
 decode_tag (ns): 5.26633
 wordline_tag (ns): 2.07987
 bitline_tag (ns): 0.869036
 sense_amp_tag (ns): 0.26
 compare (ns): 2.06244
 mux driver (ns): 4.34109
 sel inverter (ns): 0.321932
 data output driver (ns): 4.84126
 total data path (with output driver) (ns): 11.4048
 total tag path is set assoc (ns): 15.2007
 precharge time (ns): 3.23467

******* SMT STATS *******
THROUGHPUT IPC: 2.5871

Sim_cycle : 850449

Total Number of Added Instrction in Rename : 200004
Total Number of UnRenamed Inst BecOf BandWidth : 3

Total Number of Added Instrction in Execute: 200003
Total Number of UnAdded Inst BecOf Bandwidth: 0
Total Number of UnAdded Inst BecOf NoFU : 0

Total Number of Selection Done: 2950303

Instruction Per Cycle In ROB 55
Instruction Per Cycle In IQ 31
Instruction Per Cycle In FP-RF 32
Bandwidth Miss 137877
Total FLOP 200001

	class: 0: 0 matching instances
	matching: 

	class: 1: 4 matching instances
	matching: 
integer-ALU (busy for 850087 cycles
) integer-ALU (busy for 712570 cycles
) integer-ALU (busy for 487552 cycles
) integer-ALU (busy for 150030 cycles
) 
	class: 2: 1 matching instances
	matching: 
integer-MULT/DIV (busy for 5 cycles
) 
	class: 3: 1 matching instances
	matching: 
integer-MULT/DIV (busy for 5 cycles
) 
	class: 4: 4 matching instances
	matching: 
FP-adder (busy for 400008 cycles
) FP-adder (busy for 300000 cycles
) FP-adder (busy for 100000 cycles
) FP-adder (busy for 0 cycles
) 
	class: 5: 4 matching instances
	matching: 
FP-adder (busy for 400008 cycles
) FP-adder (busy for 300000 cycles
) FP-adder (busy for 100000 cycles
) FP-adder (busy for 0 cycles
) 
	class: 6: 4 matching instances
	matching: 
FP-adder (busy for 400008 cycles
) FP-adder (busy for 300000 cycles
) FP-adder (busy for 100000 cycles
) FP-adder (busy for 0 cycles
) 
	class: 7: 1 matching instances
	matching: 
FP-MULT/DIV (busy for 0 cycles
) 
	class: 8: 1 matching instances
	matching: 
FP-MULT/DIV (busy for 0 cycles
) 
	class: 9: 1 matching instances
	matching: 
FP-MULT/DIV (busy for 0 cycles
) 
	class: 10: 2 matching instances
	matching: 
memory-port (busy for 362543 cycles
) memory-port (busy for 187515 cycles
) 
	class: 11: 2 matching instances
	matching: 
memory-port (busy for 362543 cycles
) memory-port (busy for 187515 cycles
) 
	class: 12: 0 matching instances
	matching: 

	class: 13: 0 matching instances
	matching: 

	class: 14: 0 matching instances
	matching: 

	class: 15: 0 matching instances
	matching: 
