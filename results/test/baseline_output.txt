sim-outorder-none: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 128
Number of Virtual Registers: 32
Number of Physical Registers: 128
Datapath Width: 64
Total Power Consumption: 28.9911
Branch Predictor Power Consumption: 1.14342  (4.24%)
 branch target buffer power (W): 1.04097
 local predict power (W): 0.0275244
 global predict power (W): 0.031332
 chooser power (W): 0.0206036
 RAS power (W): 0.0229956
Rename Logic Power Consumption: 0.128257  (0.475%)
 Instruction Decode Power (W): 0.0038821
 RAT decode_power (W): 0.0273861
 RAT wordline_power (W): 0.00946767
 RAT bitline_power (W): 0.0850947
 DCL Comparators (W): 0.0024263
Instruction Window Power Consumption: 1.80834  (6.7%)
 tagdrive (W): 0.0562076
 tagmatch (W): 0.0221418
 Selection Logic (W): 0.00728627
 decode_power (W): 0.132187
 wordline_power (W): 0.0176803
 bitline_power (W): 1.57284
Load/Store Queue Power Consumption: 0.767475  (2.84%)
 tagdrive (W): 0.313734
 tagmatch (W): 0.124594
 decode_power (W): 0.0146202
 wordline_power (W): 0.00302882
 bitline_power (W): 0.311498
Arch. Register File Power Consumption: 0.769909  (2.85%)
 decode_power (W): 0.0273861
 wordline_power (W): 0.0176803
 bitline_power (W): 0.724843
Result Bus Power Consumption: 1.17962  (4.37%)
Total Clock Power: 11.0115  (40.8%)
Int ALU Power: 1.19732  (4.44%)
FP ALU Power: 3.66922  (13.6%)
Instruction Cache Power Consumption: 1.08076  (4%)
 decode_power (W): 0.396103
 wordline_power (W): 0.00542611
 bitline_power (W): 0.415435
 senseamp_power (W): 0.07296
 tagarray_power (W): 0.190833
Itlb_power (W): 0.0565504 (0.21%)
Data Cache Power Consumption: 2.47915  (9.19%)
 decode_power (W): 0.3525
 wordline_power (W): 0.0368784
 bitline_power (W): 1.11731
 senseamp_power (W): 0.58368
 tagarray_power (W): 0.388785
Dtlb_power (W): 0.192556 (0.713%)
Level 2 Cache Power Consumption: 1.50703 (5.58%)
 decode_power (W): 0.0990259
 wordline_power (W): 0.00799512
 bitline_power (W): 0.83087
 senseamp_power (W): 0.14592
 tagarray_power (W): 0.42322
sim-main: initalizing context 0:test.arg
args: 0:hello 
sim: loading binary...
sim: loading hello
warning: section `.comment' ignored...
sim: command line: ./sim-outorder-none -max:inst 2200000 test.arg 

sim: simulation started @ Thu Jul 24 15:46:39 2025, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst             2200000 # maximum number of inst's to execute
-fastfwd              1000000 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-cpred                  bimod # cache load-latency predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-cpred:bimod     2048 # cache load-latency bimodal predictor config (<table size>)
-cpred:2lev      1 1024 8 0 # cache load-latency 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-cpred:comb      1024 # cache load-latency combining predictor config (<meta_table_size>)
-cpred:ras                  0 # return address stack size (0 for no return stack)
-cpred:btb       512 4 # cache load-latency BTB config (<num_sets> <associativity>)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-rob:size                 128 # reorder buffer (ROB) size
-fetch:policy |icount|round_robin|       icount # fetch policy          
-recovery:model        squash # Alpha squash recovery or perfect predition: |squash|perfect|
-iq:size                   32 # issue queue (IQ) size 
-iq:issue_exec_delay            1 # minimum cycles between issue and execution
-fetch_rename_delay            4 # number of cycles between fetch and rename stages
-rename_dispatch_delay            1 # number cycles between rename and dispatch stages
-rf:size                  128 # register file (RF) size for each the INT and FP physical register file)
-lsq:size                  48 # load/store queue (LSQ) size
-cache:dl1       dl1:256:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:8:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:2:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         100 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-power:print_stats         true # print power statistics collected by wattch?

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** fast forwarding insts **
sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn                2200070 # total number of instructions committed
sim_num_insn 0              2200002 # total number of instructions committed for this thread
sim_num_refs                 825026 # total number of loads and stores committed
sim_num_loads                550017 # total number of loads committed
sim_num_stores          275009.0000 # total number of stores committed
sim_num_branches             137506 # total number of branches committed
sim_elapsed_time                  9 # total simulation time in seconds
sim_inst_rate           244452.2222 # simulation speed (in insts/sec)
sim_total_insn              2200145 # total number of instructions executed
sim_total_refs               825058 # total number of loads and stores executed
sim_total_loads              550039 # total number of loads executed
sim_total_stores        275019.0000 # total number of stores executed
sim_total_branches           137510 # total number of branches executed
sim_cycle                    825261 # total simulation time in cycles
sim_IPC                      2.6659 # instructions per cycle
sim_CPI                      0.3751 # cycles per instruction
sim_exec_BW                  2.6660 # total instructions (mis-spec + committed) per cycle
sim_IPB                     15.9998 # instruction per branch
sim_slip                   81258576 # total number of slip cycles
avg_sim_slip                36.9345 # the average slip between issue and retirement
Thread_0_bpred_bimod.lookups       137512 # total number of bpred lookups
Thread_0_bpred_bimod.updates       137502 # total number of updates
Thread_0_bpred_bimod.addr_hits       137499 # total number of address-predicted hits
Thread_0_bpred_bimod.dir_hits       137500 # total number of direction-predicted hits (includes addr-hits)
Thread_0_bpred_bimod.misses            2 # total number of misses
Thread_0_bpred_bimod.jr_hits            0 # total number of address-predicted hits for JR's
Thread_0_bpred_bimod.jr_seen            0 # total number of JR's seen
Thread_0_bpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
Thread_0_bpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
Thread_0_bpred_bimod.bpred_addr_rate    1.0000 # branch address-prediction rate (i.e., addr-hits/updates)
Thread_0_bpred_bimod.bpred_dir_rate    1.0000 # branch direction-prediction rate (i.e., all-hits/updates)
Thread_0_bpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
Thread_0_bpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
Thread_0_bpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
Thread_0_bpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
Thread_0_bpred_bimod.used_ras.PP            0 # total number of RAS predictions used
Thread_0_bpred_bimod.ras_hits.PP            0 # total number of RAS hits
Thread_0_bpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
Thread_0_cpred_bimod.lookups       550008 # total number of bpred lookups
Thread_0_cpred_bimod.updates       550008 # total number of updates
Thread_0_cpred_bimod.addr_hits        37512 # total number of address-predicted hits
Thread_0_cpred_bimod.dir_hits        37512 # total number of direction-predicted hits (includes addr-hits)
Thread_0_cpred_bimod.misses       512496 # total number of misses
Thread_0_cpred_bimod.jr_hits            0 # total number of address-predicted hits for JR's
Thread_0_cpred_bimod.jr_seen            0 # total number of JR's seen
Thread_0_cpred_bimod.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
Thread_0_cpred_bimod.jr_non_ras_seen.PP            0 # total number of non-RAS JR's seen
Thread_0_cpred_bimod.bpred_addr_rate    0.0682 # branch address-prediction rate (i.e., addr-hits/updates)
Thread_0_cpred_bimod.bpred_dir_rate    0.0682 # branch direction-prediction rate (i.e., all-hits/updates)
Thread_0_cpred_bimod.bpred_jr_rate <error: divide by zero> # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
Thread_0_cpred_bimod.bpred_jr_non_ras_rate.PP <error: divide by zero> # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
Thread_0_cpred_bimod.retstack_pushes            0 # total number of address pushed onto ret-addr stack
Thread_0_cpred_bimod.retstack_pops            0 # total number of address popped off of ret-addr stack
Thread_0_cpred_bimod.used_ras.PP            0 # total number of RAS predictions used
Thread_0_cpred_bimod.ras_hits.PP            0 # total number of RAS hits
Thread_0_cpred_bimod.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses                2200178 # total number of accesses
il1.hits                    2200174 # total number of hits
il1.misses                        4 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                 275007 # total number of accesses
dl1.hits                     275007 # total number of hits
dl1.misses                        0 # total number of misses
dl1.replacements                  0 # total number of replacements
dl1.writebacks                    0 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                      4 # total number of accesses
ul2.hits                          2 # total number of hits
ul2.misses                        2 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.5000 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses               2200178 # total number of accesses
itlb.hits                   2200178 # total number of hits
itlb.misses                       0 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                825008 # total number of accesses
dtlb.hits                    825008 # total number of hits
dtlb.misses                       0 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
mem->ld_text_size              8192 # program text (code) size in bytes
mem->ld_data_base      0x0120000000 # program initialized data segment base
mem->ld_data_size              8192 # program init'ed `.data' and uninit'ed `.bss' size in bytes
mem->ld_stack_base     0x011ff9b000 # program stack segment base (highest address in stack)
mem->ld_stack_size            16384 # program initial stack size
mem->ld_prog_entry     0x0120000130 # program entry point (initial PC)
mem->ld_environ_base   0x011ff97000 # program environment base address address
mem->ld_target_big_endian            0 # target executable endian-ness, non-zero if big endian
mem_0.page_count                  3 # total number of pages allocated
mem_0.page_mem                  24k # total size of memory pages allocated
mem_0.ptab_misses                 3 # total first level page table misses
mem_0.ptab_accesses        16013600 # total page table accesses
mem_0.ptab_miss_rate         0.0000 # first level page table miss rate
rename_power            105845.4378 # total power usage of rename unit
bpred_power             943622.0345 # total power usage of bpred unit
window_power           1492354.5028 # total power usage of instruction window
lsq_power               633367.3875 # total power usage of load/store queue
regfile_power           635376.1539 # total power usage of arch. regfile
icache_power            938575.7114 # total power usage of icache
dcache_power           2204857.4733 # total power usage of dcache
dcache2_power          1243693.6568 # total power usage of dcache2
alu_power              4016164.9831 # total power usage of alu
falu_power             3028060.8999 # total power usage of falu
resultbus_power         973491.0048 # total power usage of resultbus
clock_power            9087365.5710 # total power usage of clock
avg_rename_power             0.1283 # avg power usage of rename unit
avg_bpred_power              1.1434 # avg power usage of bpred unit
avg_window_power             1.8083 # avg power usage of instruction window
avg_lsq_power                0.7675 # avg power usage of lsq
avg_regfile_power            0.7699 # avg power usage of arch. regfile
avg_icache_power             1.1373 # avg power usage of icache
avg_dcache_power             2.6717 # avg power usage of dcache
avg_dcache2_power            1.5070 # avg power usage of dcache2
avg_alu_power                4.8665 # avg power usage of alu
avg_falu_power               3.6692 # avg power usage of falu
avg_resultbus_power          1.1796 # avg power usage of resultbus
avg_clock_power             11.0115 # avg power usage of clock
fetch_stage_power      1882197.7459 # total power usage of fetch stage
dispatch_stage_power    105845.4378 # total power usage of dispatch stage
issue_stage_power      10563929.0083 # total power usage of issue stage
avg_fetch_power              2.2807 # average power of fetch unit per cycle
avg_dispatch_power           0.1283 # average power of dispatch unit per cycle
avg_issue_power             12.8007 # average power of issue unit per cycle
total_power            22274713.9169 # total power per cycle
avg_total_power_cycle       26.9911 # average total power per cycle
avg_total_power_cycle_nofp_nod2      21.8149 # average total power per cycle
avg_total_power_insn        10.1242 # average total power per insn
avg_total_power_insn_nofp_nod2       8.1826 # average total power per insn
rename_power_cc1        105814.5279 # total power usage of rename unit_cc1
bpred_power_cc1         157222.8871 # total power usage of bpred unit_cc1
window_power_cc1       1442311.6168 # total power usage of instruction window_cc1
lsq_power_cc1           239082.0718 # total power usage of lsq_cc1
regfile_power_cc1       472667.0778 # total power usage of arch. regfile_cc1
icache_power_cc1        938311.8560 # total power usage of icache_cc1
dcache_power_cc1        734736.0826 # total power usage of dcache_cc1
dcache2_power_cc1            6.0281 # total power usage of dcache2_cc1
alu_power_cc1           987811.9363 # total power usage of alu_cc1
resultbus_power_cc1     897674.6005 # total power usage of resultbus_cc1
clock_power_cc1        4540207.2846 # total power usage of clock_cc1
avg_rename_power_cc1         0.1282 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.1905 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.7477 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.2897 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.5727 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.1370 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.8903 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0000 # avg power usage of dcache2_cc1
avg_alu_power_cc1            1.1970 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.0877 # avg power usage of resultbus_cc1
avg_clock_power_cc1          5.5015 # avg power usage of clock_cc1
fetch_stage_power_cc1  1095534.7431 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  105814.5279 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  4301622.3361 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.3275 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.1282 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          5.2124 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  10515845.9694 # total power per cycle_cc1
avg_total_power_cycle_cc1      12.7424 # average total power per cycle_cc1
avg_total_power_insn_cc1       4.7796 # average total power per insn_cc1
rename_power_cc2         70545.9578 # total power usage of rename unit_cc2
bpred_power_cc2          78611.4435 # total power usage of bpred unit_cc2
window_power_cc2       1428330.9351 # total power usage of instruction window_cc2
lsq_power_cc2           149676.3226 # total power usage of lsq_cc2
regfile_power_cc2       117289.9679 # total power usage of arch. regfile_cc2
icache_power_cc2        938311.8560 # total power usage of icache_cc2
dcache_power_cc2        367369.3772 # total power usage of dcache_cc2
dcache2_power_cc2            3.0141 # total power usage of dcache2_cc2
alu_power_cc2           658548.9737 # total power usage of alu_cc2
resultbus_power_cc2     712572.6281 # total power usage of resultbus_cc2
clock_power_cc2        3435098.4714 # total power usage of clock_cc2
avg_rename_power_cc2         0.0855 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.0953 # avg power usage of bpred unit_cc2
avg_window_power_cc2         1.7308 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.1814 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1421 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.1370 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.4452 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0000 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.7980 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.8635 # avg power usage of resultbus_cc2
avg_clock_power_cc2          4.1624 # avg power usage of clock_cc2
fetch_stage_power_cc2  1016923.2995 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2   70545.9578 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  3316501.2507 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.2322 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0855 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          4.0187 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  7956358.9474 # total power per cycle_cc2
avg_total_power_cycle_cc2       9.6410 # average total power per cycle_cc2
avg_total_power_insn_cc2       3.6163 # average total power per insn_cc2
rename_power_cc3         70549.0488 # total power usage of rename unit_cc3
bpred_power_cc3         157251.3583 # total power usage of bpred unit_cc3
window_power_cc3       1428374.0642 # total power usage of instruction window_cc3
lsq_power_cc3           185880.1059 # total power usage of lsq_cc3
regfile_power_cc3       127895.5461 # total power usage of arch. regfile_cc3
icache_power_cc3        938338.2416 # total power usage of icache_cc3
dcache_power_cc3        514381.5162 # total power usage of dcache_cc3
dcache2_power_cc3       124371.7769 # total power usage of dcache2_cc3
alu_power_cc3           961384.2783 # total power usage of alu_cc3
resultbus_power_cc3     712602.0006 # total power usage of resultbus_cc3
clock_power_cc3        3872968.5667 # total power usage of clock_cc3
avg_rename_power_cc3         0.0855 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.1905 # avg power usage of bpred unit_cc3
avg_window_power_cc3         1.7308 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.2252 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1550 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.1370 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.6233 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.1507 # avg power usage of dcache2_cc3
avg_alu_power_cc3            1.1649 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.8635 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.6930 # avg power usage of clock_cc3
fetch_stage_power_cc3  1095589.5998 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3   70549.0488 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  3926993.7422 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.3276 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0855 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.7585 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  9093996.5037 # total power per cycle_cc3
avg_total_power_cycle_cc3      11.0195 # average total power per cycle_cc3
avg_total_power_insn_cc3       4.1334 # average total power per insn_cc3
total_rename_access         2200145 # total number accesses of rename unit
total_bpred_access           137502 # total number accesses of bpred unit
total_window_access         8250321 # total number accesses of instruction window
total_lsq_access             825010 # total number accesses of load/store queue
total_regfile_access        2062500 # total number accesses of arch. regfile
total_icache_access         2200178 # total number accesses of icache
total_dcache_access          275007 # total number accesses of dcache
total_dcache2_access              4 # total number accesses of dcache2
total_alu_access            2200071 # total number accesses of alu
total_resultbus_access      2612565 # total number accesses of resultbus
avg_rename_access            2.6660 # avg number accesses of rename unit
avg_bpred_access             0.1666 # avg number accesses of bpred unit
avg_window_access            9.9972 # avg number accesses of instruction window
avg_lsq_access               0.9997 # avg number accesses of lsq
avg_regfile_access           2.4992 # avg number accesses of arch. regfile
avg_icache_access            2.6660 # avg number accesses of icache
avg_dcache_access            0.3332 # avg number accesses of dcache
avg_dcache2_access           0.0000 # avg number accesses of dcache2
avg_alu_access               2.6659 # avg number accesses of alu
avg_resultbus_access         3.1657 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                14 # max number accesses of instruction window
max_lsq_access                    3 # max number accesses of load/store queue
max_regfile_access                4 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                1 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              4 # max number accesses of resultbus
max_cycle_power_cc1         15.0878 # maximum cycle power usage of cc1
max_cycle_power_cc2         11.9269 # maximum cycle power usage of cc2
max_cycle_power_cc3         13.0159 # maximum cycle power usage of cc3


******* SMT STATS *******
THROUGHPUT IPC: 2.6659


Cache Parameters:
  Size in bytes: 16384
  Number of sets: 512
  Associativity: 4
  Block Size (bytes): 8

Access Time: 9.27925e-09
Cycle Time:  1.09081e-08

Best Ndwl (L1): 8
Best Ndbl (L1): 1
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 4
Best Ntspd (L1): 1

Time Components:
 data side (with Output driver) (ns): 8.44162
 tag side (ns): 8.55667
 decode_data (ns): 5.29318
 wordline_data (ns): 1.03507
 bitline_data (ns): 0.810785
 sense_amp_data (ns): 0.58
 decode_tag (ns): 2.37065
 wordline_tag (ns): 1.36749
 bitline_tag (ns): 0.158246
 sense_amp_tag (ns): 0.26
 compare (ns): 2.42991
 mux driver (ns): 1.6125
 sel inverter (ns): 0.357877
 data output driver (ns): 0.722579
 total data path (with output driver) (ns): 7.71904
 total tag path is set assoc (ns): 8.55667
 precharge time (ns): 1.6289

Cache Parameters:
  Size in bytes: 32768
  Number of sets: 512
  Associativity: 2
  Block Size (bytes): 32

Access Time: 9.43232e-09
Cycle Time:  1.14143e-08

Best Ndwl (L1): 4
Best Ndbl (L1): 1
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 2

Time Components:
 data side (with Output driver) (ns): 8.05618
 tag side (ns): 8.45678
 decode_data (ns): 4.25828
 wordline_data (ns): 1.38811
 bitline_data (ns): 0.854247
 sense_amp_data (ns): 0.58
 decode_tag (ns): 2.01282
 wordline_tag (ns): 1.27279
 bitline_tag (ns): 0.179065
 sense_amp_tag (ns): 0.26
 compare (ns): 2.30022
 mux driver (ns): 2.08627
 sel inverter (ns): 0.345618
 data output driver (ns): 0.975536
 total data path (with output driver) (ns): 7.08064
 total tag path is set assoc (ns): 8.45678
 precharge time (ns): 1.98194

Cache Parameters:
  Size in bytes: 32768
  Number of sets: 256
  Associativity: 4
  Block Size (bytes): 32

Access Time: 9.99176e-09
Cycle Time:  1.21362e-08

Best Ndwl (L1): 4
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 1

Time Components:
 data side (with Output driver) (ns): 7.13693
 tag side (ns): 8.6883
 decode_data (ns): 3.56242
 wordline_data (ns): 1.55063
 bitline_data (ns): 0.14043
 sense_amp_data (ns): 0.58
 decode_tag (ns): 2.01282
 wordline_tag (ns): 1.31698
 bitline_tag (ns): 0.16235
 sense_amp_tag (ns): 0.26
 compare (ns): 2.23669
 mux driver (ns): 2.36001
 sel inverter (ns): 0.339451
 data output driver (ns): 1.30346
 total data path (with output driver) (ns): 5.83348
 total tag path is set assoc (ns): 8.6883
 precharge time (ns): 2.14446

Cache Parameters:
  Size in bytes: 524288
  Number of sets: 1024
  Associativity: 8
  Block Size (bytes): 64

Access Time: 2.00419e-08
Cycle Time:  2.32766e-08

Best Ndwl (L1): 4
Best Ndbl (L1): 2
Best Nspd (L1): 1
Best Ntwl (L1): 1
Best Ntbl (L1): 2
Best Ntspd (L1): 1

Time Components:
 data side (with Output driver) (ns): 16.2461
 tag side (ns): 15.2007
 decode_data (ns): 7.31708
 wordline_data (ns): 2.64084
 bitline_data (ns): 0.866882
 sense_amp_data (ns): 0.58
 decode_tag (ns): 5.26633
 wordline_tag (ns): 2.07987
 bitline_tag (ns): 0.869036
 sense_amp_tag (ns): 0.26
 compare (ns): 2.06244
 mux driver (ns): 4.34109
 sel inverter (ns): 0.321932
 data output driver (ns): 4.84126
 total data path (with output driver) (ns): 11.4048
 total tag path is set assoc (ns): 15.2007
 precharge time (ns): 3.23467
